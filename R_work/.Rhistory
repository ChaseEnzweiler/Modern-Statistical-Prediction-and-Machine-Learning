library(Matrix)
# classic plsr algorithm
classic_plsr <- function(X, y){
# performs partial least squares algorithm
# [input] X standardized matrix of the predictors,
# Y standardized response variable
# [Output] matrix of components, matrix of weights,
# matrix of loadings, vector of coefficients, matrix of fitte values
r <- rankMatrix(X)
X_list <- list()
y_list <- list()
# loadings
p_list <- list()
# normalized weights
weights_list <- list()
# coefficients
b_list <- list()
# components
Z_list <- list()
# fitted values
fitted_list <- list()
#=========================================================
# this first part is as the first i in for loop because
# there is no indexing at zero
w <- t(X) %*% y
# normalize weight
weights_list[[1]] <- w / sqrt(sum(w^2))
# compute Z
Z_list[[1]] <- (X %*% weights_list[[1]]) / as.numeric(t(weights_list[[1]]) %*% weights_list[[1]])
# compute loadings
p_list[[1]] <- (t(X) %*% Z_list[[1]]) / as.numeric(t(Z_list[[1]]) %*% Z_list[[1]])
X_list[[1]] <- X - Z_list[[1]] %*% t(p[[1]])
b_list[[1]] <- (t(y) %*% Z_list[[1]]) / as.numeric(t(Z_list[[1]]) %*% Z_list[[1]])
y_list[[1]] <- y - as.numeric(b_list[[1]]) * Z_list[[1]]
fitted_list[[1]] <- as.numeric(b_list[[1]]) * Z_list[[1]]
#=============================================
# loop to calculate the rest for each PC
for (i in 2:r){
# calculate the weights/ direction
# this is proportional to corr between X_j and y
w <- t(X_list[[i - 1]]) %*% y_list[[i - 1]]
weights_list[[i]] <- w / sqrt(sum(w^2))
# calculate and store the component
Z_list[[i]] <- (X_list[[i - 1]] %*% weights_list[[i]]) / as.numeric(t(weights_list[[i]]) %*% weights_list[[i]])
# calculate the loadings and store
p_list[[i]] <- (t(X_list[[i - 1]]) %*% Z_list[[i]]) / as.numeric(t(Z_list[[i]]) %*% Z_list[[i]])
# recalculate and store X
X_list[[i]] <- X_list[[i - 1]] - (Z_list[[i]] %*% t(p_list[[i]]))
# calculate coefficients
b_list[[i]] <- (t(y_list[[i - 1]]) %*% Z_list[[i]]) / as.numeric(t(Z_list[[i]]) %*% Z_list[[i]])
# recalculate response
y_list[[i]] <- y_list[[i - 1]] - as.numeric(b_list[[i]]) * Z_list[[i]]
# fitted values
fitted_list[[i]] <- as.numeric(b_list[[i]]) * Z_list[[i]]
}
return(list(components = do.call(cbind, Z_list), weights = do.call(cbind, weights_list), loadings = do.call(cbind, p_list),
coefficients = do.call(c, b_list), fitted = do.call(cbind, fitted_list)))
}
# load hitters data
library("ISLR")
library("pls")
data_hitters <- Hitters
# principal component regression
pcr_fit <- pcr(Salary ~ ., data = data_hitters, scale = TRUE, validation = "none")
names(pcr_fit)
# remove salary missing values
data_hitters <- data_hitters[complete.cases(data_hitters[c("Salary")]),]
# create the design matrix
design_matrix <- model.matrix(Salary ~ ., data = data_hitters)
# remove the first column of ones
design_matrix <- design_matrix[,-1]
# standardize the design matrix
X <- scale(design_matrix)
# singular decomposition
decomp <- svd(X)
# principal components
Z <- X %*% decomp$v
# check equivalence of both methods
round(pcr_fit$scores, digits = 4) == round(Z, digits = 4)
# response vector
Y <- data_hitters$Salary
# first pcr coefficient
b_1 <- solve(t(Z[,1]) %*% Z[,1]) %*% t(Z[,1]) %*% Y
# pcr fitted value for component 1
y_hat_comp1 <- b_1 * Z[,1]
# check with pcr fitted values
round(y_hat_comp1 + mean(Y), digits = 4) == round(pcr_fit$fitted.values[, , 1], digits = 4)
# vector of pcr coefficients
b_pcr <- solve(t(Z) %*% Z) %*% t(Z) %*% Y
# vector of predicted values using all PC's
y_hat_allpc <- Z %*% b_pcr
# check that they are equal
# changes with all PC's included, us all pc's up to
round(y_hat_allpc + mean(Y), digits = 4) == round(pcr_fit$fitted.values[, , 19], digits = 4)
# calculate b_1*
b_1star <- b_1 * decomp$v[,1]
# check that the vector matches coefficients from pcr
round(b_1star, digits = 4) == round(pcr_fit$coefficients[, , 1], digits = 4)
# now do the same for all possible sets of PC's and verify the coefficients against the output of pcr_fit$coefficients
# list will hold my coefficient vectors for each PC
star_coeff <- list()
# inverse of the diagonal singular values
D_inverse <- solve(diag(decomp$d))
for (i in 1:19){
star_coeff[[paste0("b_star", i)]] <- decomp$v[,1:i] %*% as.matrix(D_inverse[1:i,1:i]) %*% t(decomp$u)[1:i,] %*% Y
}
# now check that our generated coeficient vectors match the ones from pcr_fit$coefficients. Going to check the first and last as well as a few in between
# coeficients up to 1st pc
round(star_coeff$b_star1, digits = 4) == round(pcr_fit$coefficients[, , 1], digits = 4)
# coefficient vector up to 5th pc
round(star_coeff$b_star5, digits = 4) == round(pcr_fit$coefficients[, , 5], digits = 4)
# coefficient vector up to 13th pc
round(star_coeff$b_star13, digits = 4) == round(pcr_fit$coefficients[, , 13], digits = 4)
# coefficient vector up to last pc
round(star_coeff$b_star19, digits = 4) == round(pcr_fit$coefficients[, , 19], digits = 4)
# run plsr
# salary on our model matrix
# make sure to standardize Y
# because we are assuming X and Y are standardized
Y <- scale(Y)
plsr_fit <- plsr(Y ~ X)
library(Matrix)
# classic plsr algorithm
classic_plsr <- function(X, y){
# performs partial least squares algorithm
# [input] X standardized matrix of the predictors,
# Y standardized response variable
# [Output] matrix of components, matrix of weights,
# matrix of loadings, vector of coefficients, matrix of fitte values
r <- rankMatrix(X)
X_list <- list()
y_list <- list()
# loadings
p_list <- list()
# normalized weights
weights_list <- list()
# coefficients
b_list <- list()
# components
Z_list <- list()
# fitted values
fitted_list <- list()
#=========================================================
# this first part is as the first i in for loop because
# there is no indexing at zero
w <- t(X) %*% y
# normalize weight
weights_list[[1]] <- w / sqrt(sum(w^2))
# compute Z
Z_list[[1]] <- (X %*% weights_list[[1]]) / as.numeric(t(weights_list[[1]]) %*% weights_list[[1]])
# compute loadings
p[[1]] <- (t(X) %*% Z_list[[1]]) / as.numeric(t(Z_list[[1]]) %*% Z_list[[1]])
X_list[[1]] <- X - Z_list[[1]] %*% t(p[[1]])
b_list[[1]] <- (t(y) %*% Z_list[[1]]) / as.numeric(t(Z_list[[1]]) %*% Z_list[[1]])
y_list[[1]] <- y - as.numeric(b_list[[1]]) * Z_list[[1]]
fitted_list[[1]] <- as.numeric(b_list[[1]]) * Z_list[[1]]
#=============================================
# loop to calculate the rest for each PC
for (i in 2:r){
# calculate the weights/ direction
# this is proportional to corr between X_j and y
w <- t(X_list[[i - 1]]) %*% y_list[[i - 1]]
weights_list[[i]] <- w / sqrt(sum(w^2))
# calculate and store the component
Z_list[[i]] <- (X_list[[i - 1]] %*% weights_list[[i]]) / as.numeric(t(weights_list[[i]]) %*% weights_list[[i]])
# calculate the loadings and store
p_list[[i]] <- (t(X_list[[i - 1]]) %*% Z_list[[i]]) / as.numeric(t(Z_list[[i]]) %*% Z_list[[i]])
# recalculate and store X
X_list[[i]] <- X_list[[i - 1]] - (Z_list[[i]] %*% t(p_list[[i]]))
# calculate coefficients
b_list[[i]] <- (t(y_list[[i - 1]]) %*% Z_list[[i]]) / as.numeric(t(Z_list[[i]]) %*% Z_list[[i]])
# recalculate response
y_list[[i]] <- y_list[[i - 1]] - as.numeric(b_list[[i]]) * Z_list[[i]]
# fitted values
fitted_list[[i]] <- as.numeric(b_list[[i]]) * Z_list[[i]]
}
return(list(components = do.call(cbind, Z_list), weights = do.call(cbind, weights_list), loadings = do.call(cbind, p_list),
coefficients = do.call(c, b_list), fitted = do.call(cbind, fitted_list)))
}
# my plsr algorithm
my_plsr <- classic_plsr(X, Y)
my_plsr <- classic_plsr(X, Y)
classic_plsr(X, Y)
# load hitters data
library("ISLR")
library("pls")
data_hitters <- Hitters
# principal component regression
pcr_fit <- pcr(Salary ~ ., data = data_hitters, scale = TRUE, validation = "none")
names(pcr_fit)
# remove salary missing values
data_hitters <- data_hitters[complete.cases(data_hitters[c("Salary")]),]
# create the design matrix
design_matrix <- model.matrix(Salary ~ ., data = data_hitters)
# remove the first column of ones
design_matrix <- design_matrix[,-1]
# standardize the design matrix
X <- scale(design_matrix)
# singular decomposition
decomp <- svd(X)
# principal components
Z <- X %*% decomp$v
# check equivalence of both methods
round(pcr_fit$scores, digits = 4) == round(Z, digits = 4)
# response vector
Y <- data_hitters$Salary
# first pcr coefficient
b_1 <- solve(t(Z[,1]) %*% Z[,1]) %*% t(Z[,1]) %*% Y
# pcr fitted value for component 1
y_hat_comp1 <- b_1 * Z[,1]
# check with pcr fitted values
round(y_hat_comp1 + mean(Y), digits = 4) == round(pcr_fit$fitted.values[, , 1], digits = 4)
# vector of pcr coefficients
b_pcr <- solve(t(Z) %*% Z) %*% t(Z) %*% Y
# vector of predicted values using all PC's
y_hat_allpc <- Z %*% b_pcr
# check that they are equal
# changes with all PC's included, us all pc's up to
round(y_hat_allpc + mean(Y), digits = 4) == round(pcr_fit$fitted.values[, , 19], digits = 4)
# calculate b_1*
b_1star <- b_1 * decomp$v[,1]
# check that the vector matches coefficients from pcr
round(b_1star, digits = 4) == round(pcr_fit$coefficients[, , 1], digits = 4)
# now do the same for all possible sets of PC's and verify the coefficients against the output of pcr_fit$coefficients
# list will hold my coefficient vectors for each PC
star_coeff <- list()
# inverse of the diagonal singular values
D_inverse <- solve(diag(decomp$d))
for (i in 1:19){
star_coeff[[paste0("b_star", i)]] <- decomp$v[,1:i] %*% as.matrix(D_inverse[1:i,1:i]) %*% t(decomp$u)[1:i,] %*% Y
}
# now check that our generated coeficient vectors match the ones from pcr_fit$coefficients. Going to check the first and last as well as a few in between
# coeficients up to 1st pc
round(star_coeff$b_star1, digits = 4) == round(pcr_fit$coefficients[, , 1], digits = 4)
# coefficient vector up to 5th pc
round(star_coeff$b_star5, digits = 4) == round(pcr_fit$coefficients[, , 5], digits = 4)
# coefficient vector up to 13th pc
round(star_coeff$b_star13, digits = 4) == round(pcr_fit$coefficients[, , 13], digits = 4)
# coefficient vector up to last pc
round(star_coeff$b_star19, digits = 4) == round(pcr_fit$coefficients[, , 19], digits = 4)
# run plsr
# salary on our model matrix
# make sure to standardize Y
# because we are assuming X and Y are standardized
Y <- scale(Y)
plsr_fit <- plsr(Y ~ X)
library(Matrix)
# classic plsr algorithm
classic_plsr <- function(X, y){
# performs partial least squares algorithm
# [input] X standardized matrix of the predictors,
# Y standardized response variable
# [Output] matrix of components, matrix of weights,
# matrix of loadings, vector of coefficients, matrix of fitte values
r <- rankMatrix(X)
X_list <- list()
y_list <- list()
# loadings
p_list <- list()
# normalized weights
weights_list <- list()
# coefficients
b_list <- list()
# components
Z_list <- list()
# fitted values
fitted_list <- list()
#=========================================================
# this first part is as the first i in for loop because
# there is no indexing at zero
w <- t(X) %*% y
# normalize weight
weights_list[[1]] <- w / sqrt(sum(w^2))
# compute Z
Z_list[[1]] <- (X %*% weights_list[[1]]) / as.numeric(t(weights_list[[1]]) %*% weights_list[[1]])
# compute loadings
p_list[[1]] <- (t(X) %*% Z_list[[1]]) / as.numeric(t(Z_list[[1]]) %*% Z_list[[1]])
X_list[[1]] <- X - Z_list[[1]] %*% t(p[[1]])
b_list[[1]] <- (t(y) %*% Z_list[[1]]) / as.numeric(t(Z_list[[1]]) %*% Z_list[[1]])
y_list[[1]] <- y - as.numeric(b_list[[1]]) * Z_list[[1]]
fitted_list[[1]] <- as.numeric(b_list[[1]]) * Z_list[[1]]
#=============================================
# loop to calculate the rest for each PC
for (i in 2:r){
# calculate the weights/ direction
# this is proportional to corr between X_j and y
w <- t(X_list[[i - 1]]) %*% y_list[[i - 1]]
weights_list[[i]] <- w / sqrt(sum(w^2))
# calculate and store the component
Z_list[[i]] <- (X_list[[i - 1]] %*% weights_list[[i]]) / as.numeric(t(weights_list[[i]]) %*% weights_list[[i]])
# calculate the loadings and store
p_list[[i]] <- (t(X_list[[i - 1]]) %*% Z_list[[i]]) / as.numeric(t(Z_list[[i]]) %*% Z_list[[i]])
# recalculate and store X
X_list[[i]] <- X_list[[i - 1]] - (Z_list[[i]] %*% t(p_list[[i]]))
# calculate coefficients
b_list[[i]] <- (t(y_list[[i - 1]]) %*% Z_list[[i]]) / as.numeric(t(Z_list[[i]]) %*% Z_list[[i]])
# recalculate response
y_list[[i]] <- y_list[[i - 1]] - as.numeric(b_list[[i]]) * Z_list[[i]]
# fitted values
fitted_list[[i]] <- as.numeric(b_list[[i]]) * Z_list[[i]]
}
return(list(components = do.call(cbind, Z_list), weights = do.call(cbind, weights_list), loadings = do.call(cbind, p_list),
coefficients = do.call(c, b_list), fitted = do.call(cbind, fitted_list)))
}
# my plsr algorithm
my_plsr <- classic_plsr(X, Y)
# load hitters data
library("ISLR")
library("pls")
data_hitters <- Hitters
# principal component regression
pcr_fit <- pcr(Salary ~ ., data = data_hitters, scale = TRUE, validation = "none")
names(pcr_fit)
# remove salary missing values
data_hitters <- data_hitters[complete.cases(data_hitters[c("Salary")]),]
# create the design matrix
design_matrix <- model.matrix(Salary ~ ., data = data_hitters)
# remove the first column of ones
design_matrix <- design_matrix[,-1]
# standardize the design matrix
X <- scale(design_matrix)
# singular decomposition
decomp <- svd(X)
# principal components
Z <- X %*% decomp$v
# check equivalence of both methods
round(pcr_fit$scores, digits = 4) == round(Z, digits = 4)
# response vector
Y <- data_hitters$Salary
# first pcr coefficient
b_1 <- solve(t(Z[,1]) %*% Z[,1]) %*% t(Z[,1]) %*% Y
# pcr fitted value for component 1
y_hat_comp1 <- b_1 * Z[,1]
# check with pcr fitted values
round(y_hat_comp1 + mean(Y), digits = 4) == round(pcr_fit$fitted.values[, , 1], digits = 4)
# vector of pcr coefficients
b_pcr <- solve(t(Z) %*% Z) %*% t(Z) %*% Y
# vector of predicted values using all PC's
y_hat_allpc <- Z %*% b_pcr
# check that they are equal
# changes with all PC's included, us all pc's up to
round(y_hat_allpc + mean(Y), digits = 4) == round(pcr_fit$fitted.values[, , 19], digits = 4)
# calculate b_1*
b_1star <- b_1 * decomp$v[,1]
# check that the vector matches coefficients from pcr
round(b_1star, digits = 4) == round(pcr_fit$coefficients[, , 1], digits = 4)
# now do the same for all possible sets of PC's and verify the coefficients against the output of pcr_fit$coefficients
# list will hold my coefficient vectors for each PC
star_coeff <- list()
# inverse of the diagonal singular values
D_inverse <- solve(diag(decomp$d))
for (i in 1:19){
star_coeff[[paste0("b_star", i)]] <- decomp$v[,1:i] %*% as.matrix(D_inverse[1:i,1:i]) %*% t(decomp$u)[1:i,] %*% Y
}
# now check that our generated coeficient vectors match the ones from pcr_fit$coefficients. Going to check the first and last as well as a few in between
# coeficients up to 1st pc
round(star_coeff$b_star1, digits = 4) == round(pcr_fit$coefficients[, , 1], digits = 4)
# coefficient vector up to 5th pc
round(star_coeff$b_star5, digits = 4) == round(pcr_fit$coefficients[, , 5], digits = 4)
# coefficient vector up to 13th pc
round(star_coeff$b_star13, digits = 4) == round(pcr_fit$coefficients[, , 13], digits = 4)
# coefficient vector up to last pc
round(star_coeff$b_star19, digits = 4) == round(pcr_fit$coefficients[, , 19], digits = 4)
# run plsr
# salary on our model matrix
# make sure to standardize Y
# because we are assuming X and Y are standardized
Y <- scale(Y)
plsr_fit <- plsr(Y ~ X)
library(Matrix)
# classic plsr algorithm
classic_plsr <- function(X, y){
# performs partial least squares algorithm
# [input] X standardized matrix of the predictors,
# Y standardized response variable
# [Output] matrix of components, matrix of weights,
# matrix of loadings, vector of coefficients, matrix of fitte values
r <- rankMatrix(X)
X_list <- list()
y_list <- list()
# loadings
p_list <- list()
# normalized weights
weights_list <- list()
# coefficients
b_list <- list()
# components
Z_list <- list()
# fitted values
fitted_list <- list()
#=========================================================
# this first part is as the first i in for loop because
# there is no indexing at zero
w <- t(X) %*% y
# normalize weight
weights_list[[1]] <- w / sqrt(sum(w^2))
# compute Z
Z_list[[1]] <- (X %*% weights_list[[1]]) / as.numeric(t(weights_list[[1]]) %*% weights_list[[1]])
# compute loadings
p_list[[1]] <- (t(X) %*% Z_list[[1]]) / as.numeric(t(Z_list[[1]]) %*% Z_list[[1]])
X_list[[1]] <- X - Z_list[[1]] %*% t(p[[1]])
b_list[[1]] <- (t(y) %*% Z_list[[1]]) / as.numeric(t(Z_list[[1]]) %*% Z_list[[1]])
y_list[[1]] <- y - as.numeric(b_list[[1]]) * Z_list[[1]]
fitted_list[[1]] <- as.numeric(b_list[[1]]) * Z_list[[1]]
#=============================================
# loop to calculate the rest for each PC
for (i in 2:r){
# calculate the weights/ direction
# this is proportional to corr between X_j and y
w <- t(X_list[[i - 1]]) %*% y_list[[i - 1]]
weights_list[[i]] <- w / sqrt(sum(w^2))
# calculate and store the component
Z_list[[i]] <- (X_list[[i - 1]] %*% weights_list[[i]]) / as.numeric(t(weights_list[[i]]) %*% weights_list[[i]])
# calculate the loadings and store
p_list[[i]] <- (t(X_list[[i - 1]]) %*% Z_list[[i]]) / as.numeric(t(Z_list[[i]]) %*% Z_list[[i]])
# recalculate and store X
X_list[[i]] <- X_list[[i - 1]] - (Z_list[[i]] %*% t(p_list[[i]]))
# calculate coefficients
b_list[[i]] <- (t(y_list[[i - 1]]) %*% Z_list[[i]]) / as.numeric(t(Z_list[[i]]) %*% Z_list[[i]])
# recalculate response
y_list[[i]] <- y_list[[i - 1]] - as.numeric(b_list[[i]]) * Z_list[[i]]
# fitted values
fitted_list[[i]] <- as.numeric(b_list[[i]]) * Z_list[[i]]
}
return(list(components = do.call(cbind, Z_list), weights = do.call(cbind, weights_list), loadings = do.call(cbind, p_list),
coefficients = do.call(c, b_list), fitted = do.call(cbind, fitted_list)))
}
# my plsr algorithm
my_plsr <- classic_plsr(X, Y)
